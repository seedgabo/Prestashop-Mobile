"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var src_1 = require('../../../../src');
function run() {
    describe('Modal', function () {
        describe('create', function () {
            it('should have the correct properties on modal view controller instance', function () {
                var modalViewController = src_1.Modal.create(ComponentToPresent);
                expect(modalViewController.modalViewType).toEqual("ComponentToPresent");
                expect(modalViewController.componentType).toEqual(src_1.ModalCmp);
                expect(modalViewController.viewType).toEqual("modal");
                expect(modalViewController.isOverlay).toEqual(true);
                expect(modalViewController instanceof src_1.ViewController).toEqual(true);
            });
        });
        describe('loaded', function () {
            it('should call done after loading component and call original ngAfterViewInit method', function (done) {
                // arrange
                var modal = new src_1.Modal({}, {});
                var mockInstance = {
                    ngAfterViewInit: function () { },
                    loadComponent: function () { }
                };
                var mockComponentRef = {
                    instance: "someData"
                };
                modal.instance = mockInstance;
                var ngAfterViewInitSpy = spyOn(mockInstance, "ngAfterViewInit");
                spyOn(mockInstance, "loadComponent").and.returnValue(Promise.resolve(mockComponentRef));
                var doneCallback = function () {
                    // assert
                    expect(ngAfterViewInitSpy).toHaveBeenCalled();
                    expect(modal.instance).toEqual("someData");
                    done();
                };
                // act
                modal.loaded(doneCallback);
                // (angular calls ngAfterViewInit, we're not testing angular so manually call it)
                mockInstance.ngAfterViewInit();
            }, 5000);
        });
    });
    describe('ModalCmp', function () {
        it('should return a componentRef object after loading component', function (done) {
            // arrange
            var mockLoader = {
                loadNextToLocation: function () { }
            };
            var mockNavParams = {
                data: {
                    componentType: function mockComponentType() { }
                }
            };
            var mockComponentRef = {};
            spyOn(mockLoader, "loadNextToLocation").and.returnValue(Promise.resolve(mockComponentRef));
            var modalCmp = new src_1.ModalCmp(mockLoader, mockNavParams);
            modalCmp.viewport = "mockViewport";
            // act
            modalCmp.loadComponent().then(function (loadedComponentRef) {
                // assert
                expect(loadedComponentRef).toEqual(mockComponentRef);
                expect(mockLoader.loadNextToLocation).toHaveBeenCalledWith(mockNavParams.data.componentType, modalCmp.viewport);
                done();
            });
        }, 5000);
    });
}
exports.run = run;
var STATE_ACTIVE = 'active';
var STATE_INACTIVE = 'inactive';
var STATE_INIT_ENTER = 'init_enter';
var STATE_INIT_LEAVE = 'init_leave';
var STATE_TRANS_ENTER = 'trans_enter';
var STATE_TRANS_LEAVE = 'trans_leave';
var STATE_REMOVE = 'remove';
var STATE_REMOVE_AFTER_TRANS = 'remove_after_trans';
var STATE_FORCE_ACTIVE = 'force_active';
var componentToPresentSpy = {
    _ionicProjectContent: function () { },
};
var ComponentToPresent = (function () {
    function ComponentToPresent() {
    }
    ComponentToPresent = __decorate([
        core_1.Component({
            template: "<div class=\"myComponent\"></div>"
        }), 
        __metadata('design:paramtypes', [])
    ], ComponentToPresent);
    return ComponentToPresent;
}());